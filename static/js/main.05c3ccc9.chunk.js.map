{"version":3,"sources":["components/Logo/Logo.js","components/QuoteGenerator/QuoteGenerator.js","components/QuoteCard/QuoteCard.js","App.js","serviceWorker.js","index.js","components/Logo/feather.svg"],"names":["Logo","className","src","feather","alt","QuoteGenerator","props","backgroundColor","background","selectedColor","fontSize","selectedFont","fontStyle","fontFamily","id","style","selectedQuote","quoteText","quoteAuthor","onClick","htmlToImage","toBlob","document","getElementById","then","blob","saveAs","selectColor","selectFont","QuoteCard","quoteCardClasses","quote","push","join","selectQuote","App","state","quotes","search","selectQuoteHandler","setState","searchHandler","event","console","log","target","value","fetch","response","json","data","selectColorHandler","color","classList","selectFontHandler","font","quoteList","this","length","map","key","_id","type","placeholder","onChange","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.05c3ccc9.chunk.js","sourcesContent":["import React from 'react';\nimport feather from './feather.svg';\nimport './Logo.css';\n\nconst Logo = () => {\n  return (\n    <div className=\"logo\">\n      <img src={feather} className=\"feather\" alt=\"Feather Logo\" />\n      <p className=\"say\">SAY</p>\n      <p className=\"quote-bar\">QUOTE BAR</p>\n    </div>\n  );\n}\n\nexport default Logo;\n","import React from 'react';\n\nimport htmlToImage from 'html-to-image';\nimport { saveAs } from 'file-saver';\n\nimport './QuoteGenerator.css';\n\nconst QuoteGenerator = (props) => {\n    let backgroundColor = {\n      background: props.selectedColor\n    };\n\n    let fontSize = \"\";\n    switch (props.selectedFont) {\n      case \"'Cookie', cursive\": fontSize = \"28px\"; break;\n      default: fontSize = \"20px\";\n    }\n\n    let fontStyle = {\n      fontFamily: props.selectedFont,\n      fontSize: fontSize\n    };\n\n    return(\n      <div className=\"quote-generator\">\n          <div id=\"my-quote\" className=\"quote-card-build\" style={backgroundColor}>\n            <p className=\"selected-quote\" style={fontStyle}>{props.selectedQuote.quoteText}</p>\n            <p className=\"selected-quote-author\">{props.selectedQuote.quoteAuthor}</p>\n          </div>\n\n        <button className=\"download-button\" onClick={()=>\n          htmlToImage.toBlob(document.getElementById('my-quote'))\n            .then(function (blob) {\n            saveAs(blob, 'my-quote.png');\n        })}>Download this quote</button>\n\n        <div className=\"choose-styling\">\n          <div className=\"choose-color\">\n            <p>Background color</p>\n            <div className=\"color-options\">\n              <div className=\"color-dot green\" onClick={props.selectColor}></div>\n              <div className=\"color-dot pink\" onClick={props.selectColor}></div>\n              <div className=\"color-dot yellow\" onClick={props.selectColor}></div>\n              <div className=\"color-dot coral\" onClick={props.selectColor}></div>\n              <div className=\"color-dot grey\" onClick={props.selectColor}></div>\n            </div>\n          </div>\n\n          <div className=\"choose-font\">\n            <p>Font</p>\n              <div className=\"font-options\">\n                <p className=\"font cookie\" onClick={props.selectFont}>Cookie</p>\n                <p className=\"font playfair-display\" onClick={props.selectFont}>Playfair Display</p>\n                <p className=\"font raleway\" onClick={props.selectFont}>Raleway</p>\n              </div>\n          </div>\n        </div>\n      </div>\n    );\n}\n\nexport default QuoteGenerator;\n","import React from 'react';\n\nimport './QuoteCard.css';\n\nconst QuoteCard = (props) => {\n  let quoteCardClasses = [\"quote-card\"]\n  if (props.selectedQuote === props.quote) {\n    quoteCardClasses.push(\"selected\")\n  }\n\n  return (\n    <div className={quoteCardClasses.join(' ')} onClick={props.selectQuote}>\n      <p className=\"quote\">{props.quote.quoteText}</p>\n      <p className=\"author\">{props.quote.quoteAuthor}</p>\n    </div>\n  );\n}\n\nexport default QuoteCard;\n","import React, {Component} from 'react';\n\nimport './App.css';\n\nimport Logo from './components/Logo/Logo';\nimport QuoteGenerator from './components/QuoteGenerator/QuoteGenerator';\nimport QuoteCard from './components/QuoteCard/QuoteCard';\n\nclass App extends Component {\n  state = {\n    quotes: [],\n    selectedQuote: \"\",\n    search: \"\",\n    selectedColor: \"#69CCAE\",\n    selectedFont: \"Raleway\"\n  };\n\n  componentDidMount() {\n    fetch('https://quote-garden.herokuapp.com/api/v2/quotes?page=1&limit=15')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          quotes: data.quotes,\n          selectedQuote: data.quotes[2]\n        })\n      })\n  }\n\n  selectQuoteHandler = (quote) => {\n    this.setState({\n      ...this.state,\n      selectedQuote: quote})\n  }\n\n  searchHandler = (event) => {\n    console.log(event.target.value)\n    this.setState({\n      ...this.state,\n      search: event.target.value\n    })\n    fetch(`https://quote-garden.herokuapp.com/api/v2/quotes/${event.target.value}?page=1&limit=15`)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          ...this.state,\n          quotes: data.quotes\n        })\n      })\n  }\n\n  selectColorHandler = (event) => {\n    let color = \"\";\n    switch (event.target.classList.value) {\n      case \"color-dot green\": color = \"#69CCAE\"; break;\n      case \"color-dot pink\": color = \"#EB8BB4\"; break;\n      case \"color-dot yellow\": color = \"#F3C958\"; break;\n      case \"color-dot coral\": color = \"#F68874\"; break;\n      default: color = \"#BAD4D4\";\n    }\n\n    this.setState({\n      ...this.state,\n      selectedColor: color\n    })\n  }\n\n  selectFontHandler = (event) => {\n    let font = \"\";\n    switch (event.target.classList.value) {\n      case \"font cookie\": font = \"'Cookie', cursive\"; break;\n      case \"font playfair-display\": font = \"'Playfair Display', serif\"; break;\n      default: font = \"'Raleway', sans-serif\";\n    }\n\n    this.setState({\n      ...this.state,\n      selectedFont: font\n    })\n  }\n\n  render() {\n    let quoteList = <p>No result for \"{this.state.search}\"</p>\n    if (this.state.quotes.length > 0) {\n      quoteList = this.state.quotes.map(quote =>\n        <li key={quote._id}>\n          <QuoteCard\n            quote={quote}\n            selectQuote={() => this.selectQuoteHandler(quote)}\n            selectedQuote={this.state.selectedQuote}\n            />\n        </li>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Logo />\n        </header>\n        <main>\n          <div className=\"left\">\n            <QuoteGenerator\n              selectedQuote={this.state.selectedQuote}\n              selectColor={this.selectColorHandler}\n              selectedColor={this.state.selectedColor}\n              selectFont={this.selectFontHandler}\n              selectedFont={this.state.selectedFont}/>\n          </div>\n          <div className=\"right\">\n            <input\n              className=\"search\"\n              type=\"text\"\n              placeholder=\"Search a quote\"\n              onChange={this.searchHandler}\n              value={this.state.search}/>\n            <ul className=\"quote-list\">\n              {quoteList}\n            </ul>\n          </div>\n        </main>\n        <footer>\n          <a href=\"https://github.com/Alt-katell/quote-builder\" target=\"_blank\">© Katell GOAËR 2020</a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/feather.ccb4e3d6.svg\";"],"sourceRoot":""}